[{"E:\\software\\nodeExamples\\delivery-frontend\\src\\index.js":"1","E:\\software\\nodeExamples\\delivery-frontend\\src\\App.js":"2","E:\\software\\nodeExamples\\delivery-frontend\\src\\reportWebVitals.js":"3","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\MainComponent.js":"4","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\FooterComponent.js":"5","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\HeaderComponent.js":"6","E:\\software\\nodeExamples\\delivery-frontend\\src\\shared\\baseurl.js":"7","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\configureStore.js":"8","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\userLogin.js":"9","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\ActionCreators.js":"10","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\reducer.js":"11","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\ActionTypes.js":"12","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\forms.js":"13","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\RequestFormComponent.js":"14","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\requests.js":"15","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\PendingRequestsComponent.js":"16","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\LoginComponent.js":"17","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\targetRoute.js":"18","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\LoadingComponent.js":"19","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\SignupComponent.js":"20","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\RatingStarComponent.js":"21","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\protectedRoute.js":"22"},{"size":642,"mtime":1608529967405,"results":"23","hashOfConfig":"24"},{"size":442,"mtime":1608887296185,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"26","hashOfConfig":"24"},{"size":6692,"mtime":1610632458656,"results":"27","hashOfConfig":"24"},{"size":2963,"mtime":1610086535113,"results":"28","hashOfConfig":"24"},{"size":17242,"mtime":1611409223229,"results":"29","hashOfConfig":"24"},{"size":43,"mtime":1609219555100,"results":"30","hashOfConfig":"24"},{"size":1072,"mtime":1610631040679,"results":"31","hashOfConfig":"24"},{"size":491,"mtime":1609321731868,"results":"32","hashOfConfig":"24"},{"size":11500,"mtime":1611165193053,"results":"33","hashOfConfig":"24"},{"size":142,"mtime":1608882836398,"results":"34","hashOfConfig":"24"},{"size":990,"mtime":1610631027868,"results":"35","hashOfConfig":"24"},{"size":324,"mtime":1609311388104,"results":"36","hashOfConfig":"24"},{"size":8086,"mtime":1611408970425,"results":"37","hashOfConfig":"24"},{"size":1175,"mtime":1610345035314,"results":"38","hashOfConfig":"24"},{"size":3452,"mtime":1611167240350,"results":"39","hashOfConfig":"24"},{"size":4098,"mtime":1611164951645,"results":"40","hashOfConfig":"24"},{"size":432,"mtime":1610632375011,"results":"41","hashOfConfig":"24"},{"size":255,"mtime":1609959383050,"results":"42","hashOfConfig":"24"},{"size":5972,"mtime":1611165363095,"results":"43","hashOfConfig":"24"},{"size":657,"mtime":1610361153694,"results":"44","hashOfConfig":"24"},{"size":417,"mtime":1610620810555,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1wv7mug",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"48"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"E:\\software\\nodeExamples\\delivery-frontend\\src\\index.js",[],["102","103"],"E:\\software\\nodeExamples\\delivery-frontend\\src\\App.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\reportWebVitals.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\MainComponent.js",["104","105"],"import React, { Component } from 'react';\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport RequestForm from './RequestFormComponent';\r\nimport Login from './LoginComponent';\r\nimport Signup from './SignupComponent';\r\nimport PendingRequests from './PendingRequestsComponent';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { postSignUp, postLogin, signOut, postRequestForm, fetchRequests,\r\n     addRoute, resetRoute, fetchUnratedRequests, postRating, addTargetRoute, resetTargetRoute } from '../redux/ActionCreators';\r\nimport {actions} from 'react-redux-form';\r\nimport { createBrowserHistory } from 'history';\r\n\r\n\r\nvar history = createBrowserHistory();\r\n\r\n// Get the current location.\r\n// var location = history.location;\r\n\r\n// Listen for changes to the current location.\r\n// let unlisten = history.listen(({ location, action }) => {\r\n//     console.log(action, location.pathname, location.state);\r\n//   });\r\n\r\n//   history.push('/pendingrequests');\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.isLoggedIn,\r\n        requests: state.requests,\r\n        protectedRoute: state.protectedRoute,\r\n        targetRoute: state.targetRoute,\r\n        unratedRequests: state.unratedRequests\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    postLogin: (email, password) => dispatch(postLogin(email, password)),\r\n    postSignUp: (email, phone, password, location, role) => dispatch(postSignUp(email, phone, password, location, role)),\r\n    resetLoginForm: () => { dispatch(actions.reset('login'))},\r\n    resetSignUpForm: () => { dispatch(actions.reset('signup'))},\r\n    signOut: () => dispatch(signOut()),\r\n    postRequestForm: (destination, latitude, longitude, phone, history) => dispatch(postRequestForm(destination, latitude, longitude, phone, history)),\r\n    resetRequestForm: () => { dispatch(actions.reset('request'))},\r\n    fetchRequests: () => dispatch(fetchRequests()),\r\n    addRoute: () => dispatch(addRoute()),\r\n    resetRoute: () => dispatch(resetRoute()),\r\n    fetchUnratedRequests: (history) => dispatch(fetchUnratedRequests(history)),\r\n    postRating: (requestId, rating, feedback, history) => dispatch(postRating(requestId, rating, feedback, history)),\r\n    addTargetRoute: (route) => dispatch(addTargetRoute(route)),\r\n    resetTargetRoute: () => dispatch(resetTargetRoute())\r\n  });\r\n\r\nclass Main extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchRequests();\r\n        this.props.fetchUnratedRequests(history);\r\n    }\r\n\r\n    // Not a good practice since state will keep changing till infinity\r\n    // componentDidUpdate() {\r\n    //     this.props.fetchUnratedRequests(history);\r\n    // }\r\n\r\n    render(){\r\n        const HomePage = () => {\r\n            return(\r\n            <RequestForm isLoggedIn={this.props.isLoggedIn}\r\n            postRequestForm={this.props.postRequestForm} \r\n            resetRequestForm={this.props.resetRequestForm}             \r\n            history={this.props.history}\r\n            resetRoute={this.props.resetRoute}\r\n            />\r\n            )\r\n        }\r\n        const Requests = () => {\r\n            return(\r\n                <PendingRequests \r\n                isLoggedIn={this.props.isLoggedIn}\r\n                requests={this.props.requests.requests}\r\n                errMess={this.props.requests.errMess}\r\n                addTargetRoute={this.props.addTargetRoute}\r\n                fetchRequests={this.props.fetchRequests}\r\n                history={this.props.history}\r\n                resetRoute={this.props.resetRoute}\r\n                targetRoute={this.props.targetRoute}\r\n                />\r\n            );\r\n            // if (this.props.isLoggedIn.isLoggedIn) {\r\n            //     console.log(this.props.isLoggedIn.isLoggedIn + \"in main component\");\r\n            //     return(<div></div>);\r\n    \r\n            // }\r\n            // else {\r\n            //     console.log(this.props.isLoggedIn.isLoggedIn + \"in main component\");\r\n            //     return(<div></div>);\r\n            // }\r\n        };  \r\n        const LoginPage = () => {\r\n            return(\r\n                <Login isLoggedIn={this.props.isLoggedIn}\r\n                resetLoginForm={this.props.resetLoginForm}\r\n                postLogin={this.props.postLogin}\r\n                protectedRoute={this.props.protectedRoute}\r\n                resetRoute={this.props.resetRoute}\r\n                resetTargetRoute={this.props.resetTargetRoute}\r\n                fetchRequests={this.props.fetchRequests}\r\n                history={this.props.history}\r\n                targetRoute={this.props.targetRoute}\r\n                />\r\n            )\r\n        };\r\n\r\n        const SignupPage = () => {\r\n            return(\r\n                <Signup\r\n                isLoggedIn={this.props.isLoggedIn}\r\n                resetSignUpForm={this.props.resetSignUpForm}\r\n                postSignUp={this.props.postSignUp}\r\n                protectedRoute={this.props.protectedRoute}\r\n                resetRoute={this.props.resetRoute}\r\n                resetRoute={this.props.resetRoute}\r\n            />\r\n            );            \r\n        }\r\n        return(\r\n        <div>\r\n                <Header \r\n                isLoggedIn={this.props.isLoggedIn}\r\n                resetLoginForm={this.props.resetLoginForm} \r\n                resetSignUpForm={this.props.resetSignUpForm}\r\n                postSignUp={this.props.postSignUp} \r\n                postLogin={this.props.postLogin} \r\n                signOut={this.props.signOut} \r\n                unratedRequests={this.props.unratedRequests}\r\n                postRating={this.props.postRating}\r\n                history={this.props.history}\r\n                fetchUnratedRequests={this.props.fetchUnratedRequests}\r\n                />\r\n                <Switch>\r\n                    <Route path=\"/home\" component={HomePage} />\r\n                    <Route path=\"/pendingrequests\" component={Requests} />\r\n                    <Route path=\"/login\" component={LoginPage}/>\r\n                    <Route path=\"/signup\" component={SignupPage}/>\r\n                    {/* <Route exact path=\"/contactus\" component={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm} postFeedback={this.props.postFeedback}/>}/>\r\n          <Route exact path=\"/aboutus\" component={() => <About leaders={this.props.leaders}/>}/> */}\r\n                    <Redirect to=\"/home\" />\r\n                </Switch>\r\n                <Footer />\r\n        </div>);\r\n    }\r\n}\r\n\r\n// unlisten();\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\FooterComponent.js",["106"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row } from 'reactstrap';\r\nfunction Footer(props){\r\n    return(\r\n        <div className=\"footer\">\r\n        <div className=\"container\">\r\n            <div className=\"row justify-content-left\">             \r\n                {/* <div className=\"col-4 offset-1 col-sm-2\">\r\n                    <address>\r\n                    <h5>Links</h5>\r\n                    <ul className=\"list-unstyled\">\r\n                        <li><Link to=\"/home\">Home</Link></li>\r\n                        <li><Link to=\"/aboutus\">About</Link></li>\r\n                        <li><Link to=\"/menu\">Menu</Link></li>\r\n                        <li><Link to=\"contactus\">Contact Us</Link></li>\r\n                    </ul></address>\r\n                </div> */}\r\n                <div className=\"col-7 col-sm-5\">\r\n                    <address>\r\n                    <h5>Our Address</h5>\r\n                    <Row>\r\n                    <Col>\r\n\t\t              Dothraki Street, Westeros<br />\r\n\t\t              Khal Kingdom<br />\r\n\t\t              Drogo State<br />\r\n                      </Col>\r\n                      <Col>\r\n\t\t              <i className=\"fa fa-phone fa-lg\"></i>: +910000000000<br />\r\n\t\t              <i className=\"fa fa-fax fa-lg\"></i>: +911111111111<br />\r\n\t\t              <i className=\"fa fa-envelope fa-lg\"></i>: <a style={{ color: 'rgb(3, 233, 233)'}} href=\"mail to:dothraki@delivery.net\">\r\n                         dothraki@delivery.net</a></Col></Row>\r\n                    </address>\r\n                </div>\r\n                {/* <div className=\"col-12 col-sm-4 align-self-center\">\r\n                    <address>\r\n                    <div className=\"text-center\">\r\n                        <a className=\"btn btn-social-icon btn-google\" href=\"http://google.com/+\"><i className=\"fa fa-google-plus\"></i></a>\r\n                        <a className=\"btn btn-social-icon btn-facebook\" href=\"http://www.facebook.com/profile.php?id=\"><i className=\"fa fa-facebook\"></i></a>\r\n                        <a className=\"btn btn-social-icon btn-linkedin\" href=\"http://www.linkedin.com/in/\"><i className=\"fa fa-linkedin\"></i></a>\r\n                        <a className=\"btn btn-social-icon btn-twitter\" href=\"http://twitter.com/\"><i className=\"fa fa-twitter\"></i></a>\r\n                        <a className=\"btn btn-social-icon btn-google\" href=\"http://youtube.com/\"><i className=\"fa fa-youtube\"></i></a>\r\n                        <a className=\"btn btn-social-icon\" href=\"mailto:\"><i className=\"fa fa-envelope-o\"></i></a>\r\n                    </div></address>\r\n                </div> */}\r\n            </div>\r\n            <div className=\"row justify-content-center\">\r\n                <address>             \r\n                <div className=\"col-auto\">\r\n                    <p>© Copyright 2021 Dothraki Delivery</p>\r\n                </div></address>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\HeaderComponent.js",["107","108","109"],"import React, { Component } from 'react';\r\nimport { Nav, Jumbotron, NavbarToggler, Collapse, NavItem, Navbar, NavbarBrand, Form, FormGroup, Button, Modal, ModalHeader, ModalBody, Label, Row, Input, Col } from 'reactstrap';\r\nimport { NavLink, Link } from 'react-router-dom';\r\n// import { Control, LocalForm, Errors, Form, actions } from 'react-redux-form';\r\nimport ReactStars from \"react-rating-stars-component\";\r\nimport { NavHashLink } from \"react-router-hash-link\";\r\n\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            isNavOpen: false,\r\n            isModalOpen: false, //set to false initially\r\n            rating: 1,\r\n            message: ''\r\n            // isNavSignUp: false,\r\n            // isModalSignUpOpen: false,\r\n            // role: 'consumer'\r\n        };\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleRating = this.handleRating.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    //     this.handleLogin = this.handleLogin.bind(this);\r\n    //     this.toggleNavSignUp = this.toggleNavSignUp.bind(this);\r\n    //     this.toggleModalSignUpOpen = this.toggleModalSignUpOpen.bind(this);\r\n    //     this.handleSignUp = this.handleSignUp.bind(this);\r\n    //     this.handleRoleChange = this.handleRoleChange.bind(this);\r\n    }\r\n\r\n    // handleRoleChange = (event) => {\r\n    //     this.setState({ role: event.target.value })\r\n    // }\r\n\r\n    // handleLogin = async (values) => {\r\n    //     this.toggleModal();\r\n\r\n    //     // event.preventDefault();\r\n    //     await this.props.postLogin(values.email, values.password);\r\n    //     // alert(\"email: \" + values.email\r\n    //     //     + \" Password: \" + values.password +\r\n    //     //     \" Remember: \" + values.remember);\r\n    //     if (!values.remember) {\r\n    //         this.props.resetLoginForm();\r\n    //     }\r\n    // }\r\n\r\n    handleRating = async (value) => {\r\n        this.setState({rating: value});\r\n        // if(this.props.unratedRequests.requests.length !== 0){\r\n        //     await this.props.postRating(this.props.unratedRequests.requests[0].id, value, \"Awesome\", this.props.history);\r\n        // }        \r\n        // this.toggleModal();      \r\n        // this.props.history.push('/home');\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n    \r\n        this.setState({\r\n          [name]: value\r\n        });\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        console.log('Current State is: ' + JSON.stringify(this.state));\r\n        // alert('Current State is: ' + JSON.stringify(this.state));\r\n        event.preventDefault();\r\n        if(this.props.unratedRequests.requests.length !== 0){\r\n            await this.props.postRating(this.props.unratedRequests.requests[0].id, this.state.rating, this.state.message, this.props.history);\r\n        }        \r\n        this.toggleModal();      \r\n    }\r\n\r\n    handleDefaultRating = async () => {\r\n        console.log(\"inside handleRating\");\r\n        if(this.props.unratedRequests.requests.length !== 0){\r\n            await this.props.postRating(this.props.unratedRequests.requests[0].id, 1, \"\", this.props.history);\r\n        }        \r\n        this.toggleModal();      \r\n        this.props.history.push('/home');\r\n    }\r\n\r\n    toggleNav = () => this.setState(\r\n        { isNavOpen: !this.state.isNavOpen });\r\n\r\n    toggleModal = () => this.setState(\r\n        { isModalOpen: false });\r\n\r\n    // handleSignUp = async (values) => {\r\n    //     this.toggleModalSignUpOpen();\r\n    //     await this.props.postSignUp(values.email, values.phone, values.password, values.location, this.state.role);\r\n    //     // alert(\"Email: \" + values.email\r\n    //     //     + \" Phone: \" + values.phone+ \" Role: \" + this.state.role);\r\n    //     this.props.resetSignUpForm();\r\n    // }\r\n\r\n    // toggleNavSignUp = () => this.setState(\r\n    //     { isNavSignUp: !this.state.isNavSignUp });\r\n\r\n    // toggleModalSignUpOpen = () => this.setState(\r\n    //     { isModalSignUpOpen: !this.state.isModalSignUpOpen });\r\n\r\n    ratingView = (value) => {\r\n        console.log(value);\r\n    }\r\n\r\n    \r\n    static getDerivedStateFromProps(props, state) {\r\n        if(props.unratedRequests.requests.length !== 0 && !state.isModalOpen){\r\n            console.log(\"length of requests is greater than one\");\r\n            return {isModalOpen: true};\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    render() {\r\n        var button;\r\n        if (!this.props.isLoggedIn.isLoggedIn) {\r\n            // console.log(this.props.isLoggedIn.isLoggedIn);\r\n            button = <Nav className=\"ml-auto\" navbar>\r\n                <NavItem>\r\n                    <NavHashLink className=\"nav-link\" smooth to=\"/login#login-form\"  style={{ color: 'rgb(3, 233, 233)', textDecoration: 'none' }}\r\n                        activeStyle={{ color: 'rgb(3, 233, 233)', textDecoration: 'none' }}>\r\n                        <span className=\"fa fa-sign-in fa-lg\"></span>{' '}Login\r\n                    </NavHashLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavHashLink className=\"nav-link\" smooth to=\"/signup#signup-form\" style={{ color: 'rgb(3, 233, 233)', textDecoration: 'none' }}\r\n                        activeStyle={{ color: 'rgb(3, 233, 233)', textDecoration: 'none' }}>\r\n                        <span className=\"fa fa-user-plus fa-lg\"></span>{' '}Sign Up\r\n                    </NavHashLink>\r\n                </NavItem>\r\n            </Nav>;\r\n            \r\n        }\r\n        else {\r\n            // console.log(this.props.isLoggedIn.isLoggedIn);\r\n            button = <Nav className=\"ml-auto\" navbar>\r\n                <NavItem>\r\n                    <NavHashLink smooth to=\"/pendingrequests#pending-requests\" className=\"nav-link\" style={{ color: 'rgb(3, 233, 233)', textDecoration: 'none' }}\r\n                        activeStyle={{ color: 'rgb(3, 233, 233)', textDecoration: 'none' }}>\r\n                        Pending Requests\r\n                    </NavHashLink>\r\n                    </NavItem>\r\n                <NavItem><NavLink to=\"/home\" className=\"nav-link\" onClick={this.props.signOut} style={{ color: 'rgb(3, 233, 233)', textDecoration: 'none' }}\r\n                    activeStyle={{ color: 'rgb(3, 233, 233)', textDecoration: 'none' }}>\r\n                    Sign Out{' '}<span className=\"fa fa-sign-out fa-lg\"></span>\r\n                </NavLink></NavItem>\r\n            </Nav>;\r\n\r\n            //State should not the changed inside render function *****IMPORTANT*****\r\n            // if(this.props.unratedRequests.requests.length !== 0 && !this.state.isModalOpen){\r\n            //     console.log(\"length of requests is greater than one\");\r\n            //     this.setState({isModalOpen: true});\r\n            // }\r\n            var unratedRequestDetails = <div></div>;\r\n            if(this.props.isLoggedIn.isLoggedIn && this.props.unratedRequests.requests.length !== 0){\r\n                unratedRequestDetails = <div>\r\n                    <h4>Request details:</h4>\r\n                            <h6>Pickup location: {this.props.unratedRequests.requests[0].consumerAddress}</h6>\r\n                            <h6>Dropoff location: {this.props.unratedRequests.requests[0].destinationAddress}</h6>\r\n                            <h6>Date and Time: {new Intl.DateTimeFormat('en-US', \r\n                            { year: 'numeric', month: 'short', day: '2-digit', hour: 'numeric', minute: 'numeric', second: 'numeric', timeZone: 'Asia/Kolkata' })\r\n                            .format(new Date(Date.parse(this.props.unratedRequests.requests[0].dateTime)))}</h6>\r\n                </div>\r\n            }\r\n        }\r\n        return (\r\n            <>\r\n                <Navbar dark expand=\"md\">\r\n                    <div className=\"container\">\r\n                        <NavbarToggler onClick={this.toggleNav} />\r\n                        <NavbarBrand className=\"mr-auto\" href=\"/\">\r\n                            <img src=\"assets/logo.png\" height=\"45rem\" width=\"110rem\" alt=\"Dothraki Delivery\" />\r\n                        </NavbarBrand>\r\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\r\n\r\n                            {button}\r\n\r\n                        </Collapse>\r\n                    </div>\r\n                </Navbar>                \r\n                {/* {unratedRequests} */}\r\n                 <Modal isOpen={this.state.isModalOpen} toggle={this.handleDefaultRating}>\r\n                    <ModalHeader toggle={this.handleDefaultRating}>How was your experience with us?</ModalHeader>\r\n                    <ModalBody>\r\n                        <div className=\"col-12\">\r\n                            {unratedRequestDetails}\r\n                            <Form onSubmit={this.handleSubmit}>\r\n                                <FormGroup row>\r\n                                    <Label htmlFor=\"rating\" md={2}>Rating</Label>\r\n                                    <Col md={10}>\r\n                                        <ReactStars\r\n                                            name=\"rating\"\r\n                                            count={5}\r\n                                            onChange={this.handleRating}\r\n                                            size={24}\r\n                                            activeColor=\"#ffd700\"\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Label htmlFor=\"message\" md={2}>Feedback</Label>\r\n                                    <Col md={10}>\r\n                                        <Input type=\"textarea\" id=\"message\" name=\"message\"\r\n                                            value={this.state.message}\r\n                                            onChange={this.handleInputChange}></Input>\r\n                                    </Col>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Col md={{ size: 7, offset: 5 }}>\r\n                                        <Button type=\"submit\" color=\"primary\">\r\n                                            Send Feedback\r\n                                    </Button>\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        </div>\r\n\r\n                            {/* <Row className=\"form-group\">\r\n                                <Col md={{ size: 7, offset: 5 }}>\r\n                                    <Button type=\"submit\" color=\"primary\" >\r\n                                        Login\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row> */}\r\n                    </ModalBody>\r\n                </Modal>\r\n                {/*<Modal isOpen={this.state.isModalSignUpOpen} toggle={this.toggleModalSignUpOpen}>\r\n                    <ModalHeader toggle={this.toggleModalSignUpOpen}>Sign Up</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form model=\"signup\" onSubmit={(values) => this.handleSignUp(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"name\" md={4}>Full Name</Label>\r\n                                <Col md={8}>\r\n                                    <Control.text model=\".name\" type=\"text\" id=\"name\" name=\"name\" placeholder=\"Full Name\"\r\n                                        className=\"form-control\" validators={{ required }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".name\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required'\r\n                                        }} /></Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={4}>E-mail</Label>\r\n                                <Col md={8}>\r\n                                    <Control.text model=\".email\" type=\"email\" id=\"email\" name=\"email\" placeholder=\"Email Id\"\r\n                                        className=\"form-control\" validators={{ required, validEmail }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required ',\r\n                                            validEmail: 'Must be a valid email'\r\n                                        }}\r\n                                    /></Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"phone\" md={4}>Phone</Label>\r\n                                <Col md={8}>\r\n                                    <Control.text model=\".phone\" type=\"tel\" id=\"phone\" name=\"phone\" placeholder=\"Phone Number\"\r\n                                        className=\"form-control\" validators={{ required, validPhone, isNumber }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".phone\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required ',\r\n                                            validPhone: 'Must be a valid phone',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                    /></Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"password\" md={4}>Password</Label>\r\n                                <Col md={8}>\r\n                                    <Control.text model=\".password\" type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\"\r\n                                        className=\"form-control\" validators={{ required, validPassword }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".password\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required ',\r\n                                            validPassword: 'Password must have more than 7 characters'\r\n                                        }}\r\n                                    /></Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"location\" md={4}>Current Location</Label>\r\n                                <Col md={8}>\r\n                                    <Control.text model=\".location\" type=\"text\" id=\"location\" name=\"location\" placeholder=\"Current Location\"\r\n                                        className=\"form-control\" validators={{ required }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".location\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required'\r\n                                        }} /></Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"role\" md={4}>Role</Label>\r\n                                <Col md={4}>\r\n                                    <Control.select model=\".role\" value={this.state.role} name=\"role\" className=\"form-control\" onChange={this.handleRoleChange}>\r\n                                        <option value=\"consumer\">Consumer</option>\r\n                                        <option value=\"agent\">Agent</option>\r\n                                    </Control.select></Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 7, offset: 5 }}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Sign Up\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal> */}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","E:\\software\\nodeExamples\\delivery-frontend\\src\\shared\\baseurl.js",[],["110","111"],"E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\configureStore.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\userLogin.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\ActionCreators.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\reducer.js",[],["112","113"],"E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\ActionTypes.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\forms.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\RequestFormComponent.js",["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132"],"import React, { useEffect, useState } from 'react';\r\nimport { Nav, Jumbotron, NavbarToggler, Collapse, NavItem, Navbar, NavbarBrand, Button, Modal, ModalHeader, ModalBody, Label, Row, Input, Col } from 'reactstrap';\r\nimport { Link, NavLink, Redirect, Prompt } from 'react-router-dom';\r\nimport { Control, LocalForm, Errors, Form, actions } from 'react-redux-form';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => !(val) || (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\n\r\nconst RequestForm = (props) => {\r\n    const [formIsHalfFilledOut, setFormIsHalfFilledOut] = useState(false);\r\n    const handleSubmit = async (values) => {\r\n        setFormIsHalfFilledOut(false);\r\n        await props.postRequestForm(values.destination, values.latitude, values.longitude, values.phone, props.history);\r\n        //reset logic moved to ActionCreators.js\r\n        // if(props.history.length === 1){\r\n        //     props.resetRequestForm();\r\n        // }        \r\n    }\r\n\r\n    useEffect(() => {\r\n        if (formIsHalfFilledOut) {\r\n            window.onbeforeunload = () => true\r\n        } else {\r\n            window.onbeforeunload = undefined\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n        <Jumbotron>\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-8 col-sm-12\">\r\n                                <div className=\"container\">\r\n                                <div className=\"jumbotext\">\r\n                                {/* <h1>Dothraki Delivery<span style={{color:\"teal\"}}>.</span></h1> */}\r\n                                <span>Wanna send goods to your loved ones, but cannot go personally? We got you covered!</span>\r\n                                </div></div>\r\n                            </div>\r\n                        <div className=\"col-md-4 col-sm-12\">\r\n                            <div className=\"container\">\r\n                            <div className=\"row\">                           \r\n            <div className=\"request_form\">\r\n                <h4>Create a request</h4>\r\n                <Form id=\"create-request\" model=\"request\" onSubmit={(values) => handleSubmit(values)}>\r\n                    <Prompt\r\n                        when={formIsHalfFilledOut}\r\n                        message=\"Are you sure you want to leave?\"\r\n                    /><Row className=\"form-group\">\r\n                        <Label htmlFor=\"destination\" md={12} sm={12}>Destination Address</Label>\r\n                        <Col md={12} sm={12}>\r\n                            <Control.text model=\".destination\" id=\"destination\" name=\"destination\" placeholder=\"Street, Landmark, City\"\r\n                                className=\"form-control\" validators={{ required, minLength: minLength(10), maxLength: maxLength(25) }}\r\n                                onChange={(event) => { !formIsHalfFilledOut && setFormIsHalfFilledOut(event.target.value.length > 0) }}\r\n                            ></Control.text>\r\n                            <Errors className=\"text-danger\" model=\".destination\" show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required',\r\n                                    minLength: 'Must be greater than 10 chars',\r\n                                    maxLength: 'Must be smaller than or equal to 25 chars'\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"form-group\">\r\n                        <Label htmlFor=\"latitude\"  md={12} sm={12}>Destination Latitude</Label>\r\n                        <Col  md={12} sm={12}>\r\n                            <Control.text model=\".latitude\" id=\"latitude\" name=\"latitude\" placeholder=\"xx.xxxx\"\r\n                                validators={{ required, minLength: minLength(7), maxLength: maxLength(10) }}\r\n                                className=\"form-control\"\r\n                                onChange={(event) => { !formIsHalfFilledOut && setFormIsHalfFilledOut(event.target.value.length > 0) }}>\r\n                            </Control.text>\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model=\".latitude\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required',\r\n                                    minLength: 'Must be greater than 7 chars',\r\n                                    maxLength: 'Must be smaller than or equal to 10 chars'\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"form-group\">\r\n                        <Label htmlFor=\"longitude\" md={12} sm={12}>Destination Longitude</Label>\r\n                        <Col md={12} sm={12}>\r\n                            <Control.text model=\".longitude\" id=\"longitude\" name=\"longitude\"\r\n                                placeholder=\"yy.yyyy\" className=\"form-control\"\r\n                                validators={{ required, minLength: minLength(7), maxLength: maxLength(10) }}\r\n                                onChange={(event) => { !formIsHalfFilledOut && setFormIsHalfFilledOut(event.target.value.length > 0) }}\r\n                            ></Control.text>\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model=\".longitude\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required',\r\n                                    minLength: 'Must be greater than 7 chars',\r\n                                    maxLength: 'Must be smaller than or equal to 10 chars'\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"form-group\">\r\n                        <Label htmlFor=\"phone\"  md={12} sm={12}>Destination's Contact No.</Label>\r\n                        <Col  md={12} sm={12}>\r\n                            <Control.text model=\".phone\" id=\"phone\" name=\"phone\"\r\n                                placeholder=\"Phone number of receiver\" className=\"form-control\"\r\n                                validators={{ required, minLength: minLength(10), maxLength: maxLength(10), isNumber }}\r\n                                onChange={(event) => { !formIsHalfFilledOut && setFormIsHalfFilledOut(event.target.value.length > 0) }}\r\n                            ></Control.text>\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model=\".phone\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required',\r\n                                    minLength: 'Must be greater than 9 numbers',\r\n                                    maxLength: 'Must be smaller than or equal to 10 numbers',\r\n                                    isNumber: 'Must be a number'\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"form-group\">\r\n                        <Col md={{ size: 12, offset: 0 }} sm={{size: 12, offset: 0}}>\r\n                            <Button type=\"submit\" className=\"requestFormButton\" block>\r\n                                Create Request\r\n                                    </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </div>\r\n        </div>\r\n                    </div>\r\n                </Jumbotron>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default RequestForm;","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\requests.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\PendingRequestsComponent.js",["133"],"import React from 'react';\r\nimport { Table, Row, Col, Button} from 'reactstrap';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { Loading } from './LoadingComponent';\r\nimport { HashLink } from 'react-router-hash-link';\r\n\r\nconst PendingRequests = (props) => {\r\n    if(!props.isLoggedIn.isLoggedIn){\r\n        props.addTargetRoute(\"/pendingrequests\");\r\n        console.log(props.targetRoute);\r\n        return <Redirect to=\"/login#login-form\"/>\r\n    }\r\n    if (props.errMess) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h4>{props.errMess}</h4>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    if(props.isLoading){        \r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h4>Loading...</h4>\r\n                <Loading />\r\n                </div>\r\n            </div>\r\n            );        \r\n    }\r\n    if(props.requests === null){\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h4>No requests pending!</h4>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    var serialNumber = 1;\r\n    const requestsArray = props.requests.map(request => {\r\n        var status = request.agent_id === null ? 'Waiting for agents': 'Request claimed by agent';\r\n        return (\r\n            <tr key={serialNumber}>\r\n                <th scope=\"row\">{serialNumber++}</th>\r\n                <td>{request.consumer_address}</td>\r\n                <td>{request.destination_address}</td>\r\n                <td>{request.destination_phone}</td>\r\n                <td>{request.distance_close===0?'No':'Yes'}</td>\r\n                <td>{new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit', hour: 'numeric', minute: 'numeric', second: 'numeric', timeZone: 'Asia/Kolkata' }).format(new Date(Date.parse(request.date_time)))}</td>\r\n                <td>{status}</td>\r\n            </tr>\r\n        );\r\n      });\r\n    return(\r\n        <div className='container pending_request'>\r\n            <Row style={{padding: \"10px 0px 10px 0px\"}}>\r\n            <Col md={6} sm={3} xs={3}>\r\n                    <HashLink smooth to=\"/home#create-request\" target=\"_blank\">\r\n                        <Button>\r\n                            <span className=\"fa fa-external-link-square fa=lg\"></span>\r\n                            {' '}Create new request\r\n                        </Button>\r\n                    </HashLink>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{padding: \"20px 0px 5px 0px\"}}>                \r\n                <Col md={6} sm={3} xs={3}>\r\n                    <h4>Pending Requests</h4>\r\n                </Col>\r\n            </Row>\r\n        <Table responsive borderless hover striped className='text-center' size='md' id=\"pending-requests\">\r\n            <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>Pickup Address</th>\r\n                    <th>Destination Address</th>\r\n                    <th>Destination Phone</th>\r\n                    <th>Approaching Destination</th>\r\n                    <th>Date</th>\r\n                    <th>Status</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {requestsArray}\r\n            </tbody>\r\n        </Table>\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default PendingRequests;","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\LoginComponent.js",["134","135","136","137"],"import React, { useEffect} from 'react';\r\nimport {  Button, Label, Row, Col } from 'reactstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Control, Errors, Form } from 'react-redux-form';\r\n\r\nconst validEmail = (val) => !required(val) || /^[A-Z0-9._%+-]+@[A-z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\nconst required = (val) => val && val.length;\r\n\r\n\r\n\r\nconst AuthAlert = (props) => {\r\n    // console.log(props.protectedRoute.protectedRoute);\r\n    if( props.currentRoute === \"/login\" && !props.protectedRoute.protectedRoute){\r\n        return(<div></div>);\r\n    }\r\n    \r\n    // console.log(props.history);\r\n    return(\r\n        <div>\r\n            <span style={{color:\"red\"}}><p>*You must log in first</p></span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Login = (props) => {\r\n    \r\n    const handleLogin = async (values) => {\r\n        // this.toggleModal();\r\n    \r\n        // event.preventDefault();\r\n        await props.postLogin(values.email, values.password, \"/home\");\r\n        // alert(\"email: \" + values.email\r\n        //     + \" Password: \" + values.password +\r\n        //     \" Remember: \" + values.remember);\r\n        if (!values.remember) {\r\n            props.resetLoginForm();\r\n        }\r\n    }\r\n\r\n\r\n    if(props.isLoggedIn.isLoggedIn){\r\n        var currentRoute = props.targetRoute.targetRoute;\r\n        console.log(\"targetRoute is :\" + currentRoute);\r\n        props.resetTargetRoute();\r\n        props.fetchRequests();\r\n        return(<Redirect to={currentRoute} />)       \r\n    }\r\n\r\n\r\n    \r\n    \r\n    return (\r\n        <div className=\"container row row-content\">\r\n             <div className=\"col-12 col-md-7 offset-md-2 pending_request\">\r\n             <AuthAlert currentRoute={props.targetRoute.targetRoute} protectedRoute={props.protectedRoute}/>\r\n        <Form id=\"login-form\" model=\"login\" onSubmit={(values) => handleLogin(values)}>\r\n            <Row className=\"form-group\">\r\n                <Label htmlFor=\"email\" md={2}>E-mail</Label>\r\n                <Col md={10}>\r\n                    <Control.text model=\".email\" type=\"email\" id=\"email\" name=\"email\" placeholder=\"Email Id\" className=\"form-control\"\r\n                        validators={{ required, validEmail}}\r\n                    ></Control.text>\r\n                    <Errors\r\n                        className=\"text-danger\"\r\n                        model=\".email\"\r\n                        show=\"touched\"\r\n                        messages={{\r\n                            required: 'Required',\r\n                            validEmail: 'Must be a valid email'\r\n                        }}\r\n                    /></Col>\r\n            </Row>\r\n            <Row className=\"form-group\">\r\n                <Label htmlFor=\"password\" md={2}>Password</Label>\r\n                <Col md={10}>\r\n                    <Control.text model=\".password\" type=\"password\" id=\"password\" name=\"password\"\r\n                        placeholder=\"Password\" className=\"form-control\" validators={{ required }}\r\n                    ></Control.text>\r\n                    <Errors\r\n                        className=\"text-danger\"\r\n                        model=\".password\"\r\n                        show=\"touched\"\r\n                        messages={{\r\n                            required: 'Required'\r\n                        }}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"form-group\">\r\n                <Col md={10}>\r\n                    <div className=\"form-check\">\r\n                        <Label check>\r\n                            <Control.checkbox model=\".remember\" name=\"remember\" className=\"form-check-input\" />\r\n                                    Remember me\r\n                        </Label>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"form-group\">\r\n                <Col md={{ size: 7, offset: 5 }}>\r\n                    <Button type=\"submit\" color=\"primary\">\r\n                        Login\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\targetRoute.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\LoadingComponent.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\SignupComponent.js",["138","139","140","141","142","143","144","145"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Label, Row, Col } from 'reactstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Control, Errors, Form } from 'react-redux-form';\r\n\r\nconst validEmail = (val) => !required(val) || /^[A-Z0-9._%+-]+@[A-z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\nconst required = (val) => val && val.length;\r\nconst validPhone = (val) => !required(val) || ((val) && (val.length === 10));\r\nconst validPassword = (val) => !required(val) || (val && val.length > 7);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\n\r\nconst Signup = (props) => {\r\n    const [role, setRole] = useState(\"consumer\");\r\n\r\n    // Uncomment if you wanna redirect the logged in user to current page\r\n    // if(props.isLoggedIn.isLoggedIn){\r\n    //     var currentRoute = props.targetRoute.targetRoute;\r\n    //     console.log(\"targetRoute is :\" + currentRoute);\r\n    //     props.resetRoute();\r\n    //     props.fetchRequests();\r\n    //     return(<Redirect to={currentRoute} />)       \r\n    // }\r\n    \r\n    \r\n    const handleSignUp = async (values) => {\r\n        await props.postSignUp(values.email, values.phone, values.password, values.location, role);\r\n        // alert(\"Email: \" + values.email\r\n        //     + \" Phone: \" + values.phone+ \" Role: \" + this.state.role);\r\n        props.resetSignUpForm();\r\n    }\r\n    return (\r\n        <div className=\"container row row-content\">\r\n             <div className=\"col-12 col-md-7 offset-md-2 pending_request\">\r\n        <Form id=\"signup-form\" model=\"signup\" onSubmit={(values) => handleSignUp(values)}>\r\n            <Row className=\"form-group\">\r\n                <Label htmlFor=\"name\" md={4}>Full Name</Label>\r\n                <Col md={8}>\r\n                    <Control.text model=\".name\" type=\"text\" id=\"name\" name=\"name\" placeholder=\"Full Name\"\r\n                        className=\"form-control\" validators={{ required }} />\r\n                    <Errors\r\n                        className=\"text-danger\"\r\n                        model=\".name\"\r\n                        show=\"touched\"\r\n                        messages={{\r\n                            required: 'Required'\r\n                        }} /></Col>\r\n            </Row>\r\n            <Row className=\"form-group\">\r\n                <Label htmlFor=\"email\" md={4}>E-mail</Label>\r\n                <Col md={8}>\r\n                    <Control.text model=\".email\" type=\"email\" id=\"email\" name=\"email\" placeholder=\"Email Id\"\r\n                        className=\"form-control\" validators={{ required, validEmail }} />\r\n                    <Errors\r\n                        className=\"text-danger\"\r\n                        model=\".email\"\r\n                        show=\"touched\"\r\n                        messages={{\r\n                            required: 'Required ',\r\n                            validEmail: 'Must be a valid email'\r\n                        }}\r\n                    /></Col>\r\n            </Row>\r\n            <Row className=\"form-group\">\r\n                <Label htmlFor=\"phone\" md={4}>Phone</Label>\r\n                <Col md={8}>\r\n                    <Control.text model=\".phone\" type=\"tel\" id=\"phone\" name=\"phone\" placeholder=\"Phone Number\"\r\n                        className=\"form-control\" validators={{ required, validPhone, isNumber }} />\r\n                    <Errors\r\n                        className=\"text-danger\"\r\n                        model=\".phone\"\r\n                        show=\"touched\"\r\n                        messages={{\r\n                            required: 'Required ',\r\n                            validPhone: 'Must be a valid phone',\r\n                            isNumber: 'Must be a number'\r\n                        }}\r\n                    /></Col>\r\n            </Row>\r\n            <Row className=\"form-group\">\r\n                <Label htmlFor=\"password\" md={4}>Password</Label>\r\n                <Col md={8}>\r\n                    <Control.text model=\".password\" type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\"\r\n                        className=\"form-control\" validators={{ required, validPassword }} />\r\n                    <Errors\r\n                        className=\"text-danger\"\r\n                        model=\".password\"\r\n                        show=\"touched\"\r\n                        messages={{\r\n                            required: 'Required ',\r\n                            validPassword: 'Password must have more than 7 characters'\r\n                        }}\r\n                    /></Col>\r\n            </Row>\r\n            <Row className=\"form-group\">\r\n                <Label htmlFor=\"location\" md={4}>Current Location</Label>\r\n                <Col md={8}>\r\n                    <Control.text model=\".location\" type=\"text\" id=\"location\" name=\"location\" placeholder=\"Current Location\"\r\n                        className=\"form-control\" validators={{ required }} />\r\n                    <Errors\r\n                        className=\"text-danger\"\r\n                        model=\".location\"\r\n                        show=\"touched\"\r\n                        messages={{\r\n                            required: 'Required'\r\n                        }} /></Col>\r\n            </Row>\r\n            <Row className=\"form-group\">\r\n                <Label htmlFor=\"role\" md={4}>Role</Label>\r\n                <Col md={4}>\r\n                    <Control.select model=\".role\" value={role} name=\"role\" className=\"form-control\" onChange={(event) => { setRole(event.target.value) }}>\r\n                        <option value=\"consumer\">Consumer</option>\r\n                        <option value=\"agent\">Agent</option>\r\n                    </Control.select></Col>\r\n            </Row>\r\n            <Row className=\"form-group\">\r\n                <Col md={{ size: 8, offset: 4 }}>\r\n                    <Button type=\"submit\" color=\"primary\">\r\n                        Sign Up\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup;","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\RatingStarComponent.js",["146"],"import ReactStars from \"react-rating-stars-component\";\r\nimport React from \"react\";\r\n\r\n\r\nconst ratingChanged = (newRating) => {\r\n    console.log(newRating);\r\n};\r\n\r\nconst RatingStar = (props) => {\r\n    return (\r\n        <div>\r\n            <ReactStars\r\n                count={5}\r\n                // onChange={ratingChanged}\r\n                size={24}\r\n                activeColor=\"#ffd700\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RatingStar;\r\n\r\n// render(\r\n//   <ReactStars\r\n//     count={5}\r\n//     onChange={ratingChanged}\r\n//     size={24}\r\n//     activeColor=\"#ffd700\"\r\n//   />,\r\n\r\n//   document.getElementById(\"where-to-render\")\r\n// );",["147","148"],"E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\protectedRoute.js",[],{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":56,"column":5,"nodeType":"155","messageId":"156","endLine":58,"endColumn":6},{"ruleId":"157","severity":1,"message":"158","line":127,"column":17,"nodeType":"159","endLine":127,"endColumn":51},{"ruleId":"160","severity":1,"message":"161","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":14},{"ruleId":"160","severity":1,"message":"164","line":2,"column":15,"nodeType":"162","messageId":"163","endLine":2,"endColumn":24},{"ruleId":"160","severity":1,"message":"165","line":2,"column":144,"nodeType":"162","messageId":"163","endLine":2,"endColumn":147},{"ruleId":"160","severity":1,"message":"161","line":3,"column":19,"nodeType":"162","messageId":"163","endLine":3,"endColumn":23},{"ruleId":"149","replacedBy":"166"},{"ruleId":"151","replacedBy":"167"},{"ruleId":"149","replacedBy":"168"},{"ruleId":"151","replacedBy":"169"},{"ruleId":"160","severity":1,"message":"170","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":13},{"ruleId":"160","severity":1,"message":"171","line":2,"column":26,"nodeType":"162","messageId":"163","endLine":2,"endColumn":39},{"ruleId":"160","severity":1,"message":"172","line":2,"column":41,"nodeType":"162","messageId":"163","endLine":2,"endColumn":49},{"ruleId":"160","severity":1,"message":"173","line":2,"column":51,"nodeType":"162","messageId":"163","endLine":2,"endColumn":58},{"ruleId":"160","severity":1,"message":"174","line":2,"column":60,"nodeType":"162","messageId":"163","endLine":2,"endColumn":66},{"ruleId":"160","severity":1,"message":"175","line":2,"column":68,"nodeType":"162","messageId":"163","endLine":2,"endColumn":79},{"ruleId":"160","severity":1,"message":"176","line":2,"column":89,"nodeType":"162","messageId":"163","endLine":2,"endColumn":94},{"ruleId":"160","severity":1,"message":"177","line":2,"column":96,"nodeType":"162","messageId":"163","endLine":2,"endColumn":107},{"ruleId":"160","severity":1,"message":"178","line":2,"column":109,"nodeType":"162","messageId":"163","endLine":2,"endColumn":118},{"ruleId":"160","severity":1,"message":"179","line":2,"column":132,"nodeType":"162","messageId":"163","endLine":2,"endColumn":137},{"ruleId":"160","severity":1,"message":"161","line":3,"column":10,"nodeType":"162","messageId":"163","endLine":3,"endColumn":14},{"ruleId":"160","severity":1,"message":"180","line":3,"column":16,"nodeType":"162","messageId":"163","endLine":3,"endColumn":23},{"ruleId":"160","severity":1,"message":"181","line":3,"column":25,"nodeType":"162","messageId":"163","endLine":3,"endColumn":33},{"ruleId":"160","severity":1,"message":"182","line":4,"column":19,"nodeType":"162","messageId":"163","endLine":4,"endColumn":28},{"ruleId":"160","severity":1,"message":"183","line":4,"column":44,"nodeType":"162","messageId":"163","endLine":4,"endColumn":51},{"ruleId":"184","severity":1,"message":"185","line":54,"column":29,"nodeType":"186","endLine":57,"endColumn":30},{"ruleId":"184","severity":1,"message":"185","line":70,"column":29,"nodeType":"186","endLine":73,"endColumn":137},{"ruleId":"184","severity":1,"message":"185","line":90,"column":29,"nodeType":"186","endLine":94,"endColumn":30},{"ruleId":"184","severity":1,"message":"185","line":110,"column":29,"nodeType":"186","endLine":114,"endColumn":30},{"ruleId":"160","severity":1,"message":"161","line":3,"column":10,"nodeType":"162","messageId":"163","endLine":3,"endColumn":14},{"ruleId":"160","severity":1,"message":"187","line":1,"column":17,"nodeType":"162","messageId":"163","endLine":1,"endColumn":26},{"ruleId":"184","severity":1,"message":"185","line":60,"column":21,"nodeType":"186","endLine":62,"endColumn":22},{"ruleId":"184","severity":1,"message":"185","line":76,"column":21,"nodeType":"186","endLine":78,"endColumn":22},{"ruleId":"184","severity":1,"message":"188","line":93,"column":29,"nodeType":"186","endLine":93,"endColumn":112},{"ruleId":"160","severity":1,"message":"187","line":1,"column":27,"nodeType":"162","messageId":"163","endLine":1,"endColumn":36},{"ruleId":"160","severity":1,"message":"181","line":3,"column":10,"nodeType":"162","messageId":"163","endLine":3,"endColumn":18},{"ruleId":"184","severity":1,"message":"185","line":38,"column":21,"nodeType":"186","endLine":39,"endColumn":78},{"ruleId":"184","severity":1,"message":"185","line":51,"column":21,"nodeType":"186","endLine":52,"endColumn":90},{"ruleId":"184","severity":1,"message":"185","line":66,"column":21,"nodeType":"186","endLine":67,"endColumn":100},{"ruleId":"184","severity":1,"message":"185","line":82,"column":21,"nodeType":"186","endLine":83,"endColumn":93},{"ruleId":"184","severity":1,"message":"185","line":97,"column":21,"nodeType":"186","endLine":98,"endColumn":78},{"ruleId":"184","severity":1,"message":"189","line":110,"column":21,"nodeType":"186","endLine":110,"endColumn":155},{"ruleId":"160","severity":1,"message":"190","line":5,"column":7,"nodeType":"162","messageId":"163","endLine":5,"endColumn":20},{"ruleId":"149","replacedBy":"191"},{"ruleId":"151","replacedBy":"192"},"no-native-reassign",["193"],"no-negated-in-lhs",["194"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Jumbotron' is defined but never used.","'Row' is defined but never used.",["193"],["194"],["193"],["194"],"'Nav' is defined but never used.","'NavbarToggler' is defined but never used.","'Collapse' is defined but never used.","'NavItem' is defined but never used.","'Navbar' is defined but never used.","'NavbarBrand' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'Input' is defined but never used.","'NavLink' is defined but never used.","'Redirect' is defined but never used.","'LocalForm' is defined but never used.","'actions' is defined but never used.","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'useEffect' is defined but never used.","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","'ratingChanged' is assigned a value but never used.",["193"],["194"],"no-global-assign","no-unsafe-negation"]