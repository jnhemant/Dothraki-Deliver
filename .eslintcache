[{"E:\\software\\nodeExamples\\delivery-frontend\\src\\index.js":"1","E:\\software\\nodeExamples\\delivery-frontend\\src\\App.js":"2","E:\\software\\nodeExamples\\delivery-frontend\\src\\reportWebVitals.js":"3","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\MainComponent.js":"4","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\FooterComponent.js":"5","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\HeaderComponent.js":"6","E:\\software\\nodeExamples\\delivery-frontend\\src\\shared\\baseurl.js":"7","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\configureStore.js":"8","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\userLogin.js":"9","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\ActionCreators.js":"10","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\reducer.js":"11","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\ActionTypes.js":"12","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\forms.js":"13","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\RequestFormComponent.js":"14","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\requests.js":"15","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\PendingRequestsComponent.js":"16","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\LoginComponent.js":"17","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\targetRoute.js":"18","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\LoadingComponent.js":"19","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\SignupComponent.js":"20","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\RatingStarComponent.js":"21","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\protectedRoute.js":"22","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\TryMeComponent.js":"23"},{"size":642,"mtime":1608529967405,"results":"24","hashOfConfig":"25"},{"size":442,"mtime":1608887296185,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"25"},{"size":6681,"mtime":1612372905574,"results":"28","hashOfConfig":"25"},{"size":2963,"mtime":1610086535113,"results":"29","hashOfConfig":"25"},{"size":17242,"mtime":1611409223229,"results":"30","hashOfConfig":"25"},{"size":43,"mtime":1609219555100,"results":"31","hashOfConfig":"25"},{"size":1072,"mtime":1610631040679,"results":"32","hashOfConfig":"25"},{"size":491,"mtime":1609321731868,"results":"33","hashOfConfig":"25"},{"size":11500,"mtime":1611165193053,"results":"34","hashOfConfig":"25"},{"size":142,"mtime":1608882836398,"results":"35","hashOfConfig":"25"},{"size":990,"mtime":1610631027868,"results":"36","hashOfConfig":"25"},{"size":324,"mtime":1609311388104,"results":"37","hashOfConfig":"25"},{"size":11417,"mtime":1612376983411,"results":"38","hashOfConfig":"25"},{"size":1175,"mtime":1610345035314,"results":"39","hashOfConfig":"25"},{"size":3452,"mtime":1612378859668,"results":"40","hashOfConfig":"25"},{"size":4591,"mtime":1612463270056,"results":"41","hashOfConfig":"25"},{"size":432,"mtime":1610632375011,"results":"42","hashOfConfig":"25"},{"size":255,"mtime":1612094348855,"results":"43","hashOfConfig":"25"},{"size":7521,"mtime":1612463187986,"results":"44","hashOfConfig":"25"},{"size":657,"mtime":1610361153694,"results":"45","hashOfConfig":"25"},{"size":417,"mtime":1610620810555,"results":"46","hashOfConfig":"25"},{"size":943,"mtime":1612291257491,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1wv7mug",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"E:\\software\\nodeExamples\\delivery-frontend\\src\\index.js",[],["103","104"],"E:\\software\\nodeExamples\\delivery-frontend\\src\\App.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\reportWebVitals.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\MainComponent.js",["105","106"],"import React, { Component } from 'react';\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport RequestForm from './RequestFormComponent';\r\nimport Login from './LoginComponent';\r\nimport Signup from './SignupComponent';\r\nimport TryMe from './TryMeComponent';\r\nimport PendingRequests from './PendingRequestsComponent';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { postSignUp, postLogin, signOut, postRequestForm, fetchRequests,\r\n     addRoute, resetRoute, fetchUnratedRequests, postRating, addTargetRoute, resetTargetRoute } from '../redux/ActionCreators';\r\nimport {actions} from 'react-redux-form';\r\nimport { createBrowserHistory } from 'history';\r\n\r\n\r\nvar history = createBrowserHistory();\r\n\r\n// Get the current location.\r\n// var location = history.location;\r\n\r\n// Listen for changes to the current location.\r\n// let unlisten = history.listen(({ location, action }) => {\r\n//     console.log(action, location.pathname, location.state);\r\n//   });\r\n\r\n//   history.push('/pendingrequests');\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.isLoggedIn,\r\n        requests: state.requests,\r\n        protectedRoute: state.protectedRoute,\r\n        targetRoute: state.targetRoute,\r\n        unratedRequests: state.unratedRequests\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    postLogin: (email, password) => dispatch(postLogin(email, password)),\r\n    postSignUp: (email, phone, password, location, role) => dispatch(postSignUp(email, phone, password, location, role)),\r\n    resetLoginForm: () => { dispatch(actions.reset('login'))},\r\n    resetSignUpForm: () => { dispatch(actions.reset('signup'))},\r\n    signOut: () => dispatch(signOut()),\r\n    postRequestForm: (destination, latitude, longitude, phone, history) => dispatch(postRequestForm(destination, latitude, longitude, phone, history)),\r\n    resetRequestForm: () => { dispatch(actions.reset('request'))},\r\n    fetchRequests: () => dispatch(fetchRequests()),\r\n    addRoute: () => dispatch(addRoute()),\r\n    resetRoute: () => dispatch(resetRoute()),\r\n    fetchUnratedRequests: (history) => dispatch(fetchUnratedRequests(history)),\r\n    postRating: (requestId, rating, feedback, history) => dispatch(postRating(requestId, rating, feedback, history)),\r\n    addTargetRoute: (route) => dispatch(addTargetRoute(route)),\r\n    resetTargetRoute: () => dispatch(resetTargetRoute())\r\n  });\r\n\r\nclass Main extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchRequests();\r\n        this.props.fetchUnratedRequests(history);\r\n    }\r\n\r\n    // Not a good practice since state will keep changing till infinity\r\n    // componentDidUpdate() {\r\n    //     this.props.fetchUnratedRequests(history);\r\n    // }\r\n\r\n    render(){\r\n        const HomePage = () => {\r\n            return(\r\n            <RequestForm isLoggedIn={this.props.isLoggedIn}\r\n            postRequestForm={this.props.postRequestForm}            \r\n            history={this.props.history}\r\n            />\r\n            )\r\n        }\r\n        const Requests = () => {\r\n            return(\r\n                <PendingRequests \r\n                isLoggedIn={this.props.isLoggedIn}\r\n                requests={this.props.requests.requests}\r\n                errMess={this.props.requests.errMess}\r\n                addTargetRoute={this.props.addTargetRoute}\r\n                fetchRequests={this.props.fetchRequests}\r\n                history={this.props.history}\r\n                resetRoute={this.props.resetRoute}\r\n                targetRoute={this.props.targetRoute}\r\n                />\r\n            );\r\n            // if (this.props.isLoggedIn.isLoggedIn) {\r\n            //     console.log(this.props.isLoggedIn.isLoggedIn + \"in main component\");\r\n            //     return(<div></div>);\r\n    \r\n            // }\r\n            // else {\r\n            //     console.log(this.props.isLoggedIn.isLoggedIn + \"in main component\");\r\n            //     return(<div></div>);\r\n            // }\r\n        };  \r\n        const LoginPage = () => {\r\n            return(\r\n                <Login isLoggedIn={this.props.isLoggedIn}\r\n                resetLoginForm={this.props.resetLoginForm}\r\n                postLogin={this.props.postLogin}\r\n                protectedRoute={this.props.protectedRoute}\r\n                resetRoute={this.props.resetRoute}\r\n                resetTargetRoute={this.props.resetTargetRoute}\r\n                fetchRequests={this.props.fetchRequests}\r\n                history={this.props.history}\r\n                targetRoute={this.props.targetRoute}\r\n                />\r\n            )\r\n        };\r\n\r\n        const SignupPage = () => {\r\n            return(\r\n                <Signup\r\n                isLoggedIn={this.props.isLoggedIn}\r\n                resetSignUpForm={this.props.resetSignUpForm}\r\n                postSignUp={this.props.postSignUp}\r\n                protectedRoute={this.props.protectedRoute}\r\n                resetRoute={this.props.resetRoute}\r\n                resetRoute={this.props.resetRoute}\r\n            />\r\n            );            \r\n        }\r\n        return(\r\n        <div>\r\n                <Header \r\n                isLoggedIn={this.props.isLoggedIn}\r\n                resetLoginForm={this.props.resetLoginForm} \r\n                resetSignUpForm={this.props.resetSignUpForm}\r\n                postSignUp={this.props.postSignUp} \r\n                postLogin={this.props.postLogin} \r\n                signOut={this.props.signOut} \r\n                unratedRequests={this.props.unratedRequests}\r\n                postRating={this.props.postRating}\r\n                history={this.props.history}\r\n                fetchUnratedRequests={this.props.fetchUnratedRequests}\r\n                />\r\n                <Switch>\r\n                    <Route path=\"/home\" component={HomePage} />\r\n                    <Route path=\"/pendingrequests\" component={Requests} />\r\n                    <Route path=\"/login\" component={LoginPage}/>\r\n                    <Route path=\"/signup\" component={SignupPage}/>\r\n                    <Route path=\"/try\" component={TryMe}/>\r\n                    {/* <Route exact path=\"/contactus\" component={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm} postFeedback={this.props.postFeedback}/>}/>\r\n          <Route exact path=\"/aboutus\" component={() => <About leaders={this.props.leaders}/>}/> */}\r\n                    <Redirect to=\"/home\" />\r\n                </Switch>\r\n                <Footer />\r\n        </div>);\r\n    }\r\n}\r\n\r\n// unlisten();\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\FooterComponent.js",["107"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row } from 'reactstrap';\r\nfunction Footer(props){\r\n    return(\r\n        <div className=\"footer\">\r\n        <div className=\"container\">\r\n            <div className=\"row justify-content-left\">             \r\n                {/* <div className=\"col-4 offset-1 col-sm-2\">\r\n                    <address>\r\n                    <h5>Links</h5>\r\n                    <ul className=\"list-unstyled\">\r\n                        <li><Link to=\"/home\">Home</Link></li>\r\n                        <li><Link to=\"/aboutus\">About</Link></li>\r\n                        <li><Link to=\"/menu\">Menu</Link></li>\r\n                        <li><Link to=\"contactus\">Contact Us</Link></li>\r\n                    </ul></address>\r\n                </div> */}\r\n                <div className=\"col-7 col-sm-5\">\r\n                    <address>\r\n                    <h5>Our Address</h5>\r\n                    <Row>\r\n                    <Col>\r\n\t\t              Dothraki Street, Westeros<br />\r\n\t\t              Khal Kingdom<br />\r\n\t\t              Drogo State<br />\r\n                      </Col>\r\n                      <Col>\r\n\t\t              <i className=\"fa fa-phone fa-lg\"></i>: +910000000000<br />\r\n\t\t              <i className=\"fa fa-fax fa-lg\"></i>: +911111111111<br />\r\n\t\t              <i className=\"fa fa-envelope fa-lg\"></i>: <a style={{ color: 'rgb(3, 233, 233)'}} href=\"mail to:dothraki@delivery.net\">\r\n                         dothraki@delivery.net</a></Col></Row>\r\n                    </address>\r\n                </div>\r\n                {/* <div className=\"col-12 col-sm-4 align-self-center\">\r\n                    <address>\r\n                    <div className=\"text-center\">\r\n                        <a className=\"btn btn-social-icon btn-google\" href=\"http://google.com/+\"><i className=\"fa fa-google-plus\"></i></a>\r\n                        <a className=\"btn btn-social-icon btn-facebook\" href=\"http://www.facebook.com/profile.php?id=\"><i className=\"fa fa-facebook\"></i></a>\r\n                        <a className=\"btn btn-social-icon btn-linkedin\" href=\"http://www.linkedin.com/in/\"><i className=\"fa fa-linkedin\"></i></a>\r\n                        <a className=\"btn btn-social-icon btn-twitter\" href=\"http://twitter.com/\"><i className=\"fa fa-twitter\"></i></a>\r\n                        <a className=\"btn btn-social-icon btn-google\" href=\"http://youtube.com/\"><i className=\"fa fa-youtube\"></i></a>\r\n                        <a className=\"btn btn-social-icon\" href=\"mailto:\"><i className=\"fa fa-envelope-o\"></i></a>\r\n                    </div></address>\r\n                </div> */}\r\n            </div>\r\n            <div className=\"row justify-content-center\">\r\n                <address>             \r\n                <div className=\"col-auto\">\r\n                    <p>© Copyright 2021 Dothraki Delivery</p>\r\n                </div></address>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\HeaderComponent.js",["108","109","110"],"import React, { Component } from 'react';\r\nimport { Nav, Jumbotron, NavbarToggler, Collapse, NavItem, Navbar, NavbarBrand, Form, FormGroup, Button, Modal, ModalHeader, ModalBody, Label, Row, Input, Col } from 'reactstrap';\r\nimport { NavLink, Link } from 'react-router-dom';\r\n// import { Control, LocalForm, Errors, Form, actions } from 'react-redux-form';\r\nimport ReactStars from \"react-rating-stars-component\";\r\nimport { NavHashLink } from \"react-router-hash-link\";\r\n\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            isNavOpen: false,\r\n            isModalOpen: false, //set to false initially\r\n            rating: 1,\r\n            message: ''\r\n            // isNavSignUp: false,\r\n            // isModalSignUpOpen: false,\r\n            // role: 'consumer'\r\n        };\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleRating = this.handleRating.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    //     this.handleLogin = this.handleLogin.bind(this);\r\n    //     this.toggleNavSignUp = this.toggleNavSignUp.bind(this);\r\n    //     this.toggleModalSignUpOpen = this.toggleModalSignUpOpen.bind(this);\r\n    //     this.handleSignUp = this.handleSignUp.bind(this);\r\n    //     this.handleRoleChange = this.handleRoleChange.bind(this);\r\n    }\r\n\r\n    // handleRoleChange = (event) => {\r\n    //     this.setState({ role: event.target.value })\r\n    // }\r\n\r\n    // handleLogin = async (values) => {\r\n    //     this.toggleModal();\r\n\r\n    //     // event.preventDefault();\r\n    //     await this.props.postLogin(values.email, values.password);\r\n    //     // alert(\"email: \" + values.email\r\n    //     //     + \" Password: \" + values.password +\r\n    //     //     \" Remember: \" + values.remember);\r\n    //     if (!values.remember) {\r\n    //         this.props.resetLoginForm();\r\n    //     }\r\n    // }\r\n\r\n    handleRating = async (value) => {\r\n        this.setState({rating: value});\r\n        // if(this.props.unratedRequests.requests.length !== 0){\r\n        //     await this.props.postRating(this.props.unratedRequests.requests[0].id, value, \"Awesome\", this.props.history);\r\n        // }        \r\n        // this.toggleModal();      \r\n        // this.props.history.push('/home');\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n    \r\n        this.setState({\r\n          [name]: value\r\n        });\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        console.log('Current State is: ' + JSON.stringify(this.state));\r\n        // alert('Current State is: ' + JSON.stringify(this.state));\r\n        event.preventDefault();\r\n        if(this.props.unratedRequests.requests.length !== 0){\r\n            await this.props.postRating(this.props.unratedRequests.requests[0].id, this.state.rating, this.state.message, this.props.history);\r\n        }        \r\n        this.toggleModal();      \r\n    }\r\n\r\n    handleDefaultRating = async () => {\r\n        console.log(\"inside handleRating\");\r\n        if(this.props.unratedRequests.requests.length !== 0){\r\n            await this.props.postRating(this.props.unratedRequests.requests[0].id, 1, \"\", this.props.history);\r\n        }        \r\n        this.toggleModal();      \r\n        this.props.history.push('/home');\r\n    }\r\n\r\n    toggleNav = () => this.setState(\r\n        { isNavOpen: !this.state.isNavOpen });\r\n\r\n    toggleModal = () => this.setState(\r\n        { isModalOpen: false });\r\n\r\n    // handleSignUp = async (values) => {\r\n    //     this.toggleModalSignUpOpen();\r\n    //     await this.props.postSignUp(values.email, values.phone, values.password, values.location, this.state.role);\r\n    //     // alert(\"Email: \" + values.email\r\n    //     //     + \" Phone: \" + values.phone+ \" Role: \" + this.state.role);\r\n    //     this.props.resetSignUpForm();\r\n    // }\r\n\r\n    // toggleNavSignUp = () => this.setState(\r\n    //     { isNavSignUp: !this.state.isNavSignUp });\r\n\r\n    // toggleModalSignUpOpen = () => this.setState(\r\n    //     { isModalSignUpOpen: !this.state.isModalSignUpOpen });\r\n\r\n    ratingView = (value) => {\r\n        console.log(value);\r\n    }\r\n\r\n    \r\n    static getDerivedStateFromProps(props, state) {\r\n        if(props.unratedRequests.requests.length !== 0 && !state.isModalOpen){\r\n            console.log(\"length of requests is greater than one\");\r\n            return {isModalOpen: true};\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    render() {\r\n        var button;\r\n        if (!this.props.isLoggedIn.isLoggedIn) {\r\n            // console.log(this.props.isLoggedIn.isLoggedIn);\r\n            button = <Nav className=\"ml-auto\" navbar>\r\n                <NavItem>\r\n                    <NavHashLink className=\"nav-link\" smooth to=\"/login#login-form\"  style={{ color: 'rgb(3, 233, 233)', textDecoration: 'none' }}\r\n                        activeStyle={{ color: 'rgb(3, 233, 233)', textDecoration: 'none' }}>\r\n                        <span className=\"fa fa-sign-in fa-lg\"></span>{' '}Login\r\n                    </NavHashLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavHashLink className=\"nav-link\" smooth to=\"/signup#signup-form\" style={{ color: 'rgb(3, 233, 233)', textDecoration: 'none' }}\r\n                        activeStyle={{ color: 'rgb(3, 233, 233)', textDecoration: 'none' }}>\r\n                        <span className=\"fa fa-user-plus fa-lg\"></span>{' '}Sign Up\r\n                    </NavHashLink>\r\n                </NavItem>\r\n            </Nav>;\r\n            \r\n        }\r\n        else {\r\n            // console.log(this.props.isLoggedIn.isLoggedIn);\r\n            button = <Nav className=\"ml-auto\" navbar>\r\n                <NavItem>\r\n                    <NavHashLink smooth to=\"/pendingrequests#pending-requests\" className=\"nav-link\" style={{ color: 'rgb(3, 233, 233)', textDecoration: 'none' }}\r\n                        activeStyle={{ color: 'rgb(3, 233, 233)', textDecoration: 'none' }}>\r\n                        Pending Requests\r\n                    </NavHashLink>\r\n                    </NavItem>\r\n                <NavItem><NavLink to=\"/home\" className=\"nav-link\" onClick={this.props.signOut} style={{ color: 'rgb(3, 233, 233)', textDecoration: 'none' }}\r\n                    activeStyle={{ color: 'rgb(3, 233, 233)', textDecoration: 'none' }}>\r\n                    Sign Out{' '}<span className=\"fa fa-sign-out fa-lg\"></span>\r\n                </NavLink></NavItem>\r\n            </Nav>;\r\n\r\n            //State should not the changed inside render function *****IMPORTANT*****\r\n            // if(this.props.unratedRequests.requests.length !== 0 && !this.state.isModalOpen){\r\n            //     console.log(\"length of requests is greater than one\");\r\n            //     this.setState({isModalOpen: true});\r\n            // }\r\n            var unratedRequestDetails = <div></div>;\r\n            if(this.props.isLoggedIn.isLoggedIn && this.props.unratedRequests.requests.length !== 0){\r\n                unratedRequestDetails = <div>\r\n                    <h4>Request details:</h4>\r\n                            <h6>Pickup location: {this.props.unratedRequests.requests[0].consumerAddress}</h6>\r\n                            <h6>Dropoff location: {this.props.unratedRequests.requests[0].destinationAddress}</h6>\r\n                            <h6>Date and Time: {new Intl.DateTimeFormat('en-US', \r\n                            { year: 'numeric', month: 'short', day: '2-digit', hour: 'numeric', minute: 'numeric', second: 'numeric', timeZone: 'Asia/Kolkata' })\r\n                            .format(new Date(Date.parse(this.props.unratedRequests.requests[0].dateTime)))}</h6>\r\n                </div>\r\n            }\r\n        }\r\n        return (\r\n            <>\r\n                <Navbar dark expand=\"md\">\r\n                    <div className=\"container\">\r\n                        <NavbarToggler onClick={this.toggleNav} />\r\n                        <NavbarBrand className=\"mr-auto\" href=\"/\">\r\n                            <img src=\"assets/logo.png\" height=\"45rem\" width=\"110rem\" alt=\"Dothraki Delivery\" />\r\n                        </NavbarBrand>\r\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\r\n\r\n                            {button}\r\n\r\n                        </Collapse>\r\n                    </div>\r\n                </Navbar>                \r\n                {/* {unratedRequests} */}\r\n                 <Modal isOpen={this.state.isModalOpen} toggle={this.handleDefaultRating}>\r\n                    <ModalHeader toggle={this.handleDefaultRating}>How was your experience with us?</ModalHeader>\r\n                    <ModalBody>\r\n                        <div className=\"col-12\">\r\n                            {unratedRequestDetails}\r\n                            <Form onSubmit={this.handleSubmit}>\r\n                                <FormGroup row>\r\n                                    <Label htmlFor=\"rating\" md={2}>Rating</Label>\r\n                                    <Col md={10}>\r\n                                        <ReactStars\r\n                                            name=\"rating\"\r\n                                            count={5}\r\n                                            onChange={this.handleRating}\r\n                                            size={24}\r\n                                            activeColor=\"#ffd700\"\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Label htmlFor=\"message\" md={2}>Feedback</Label>\r\n                                    <Col md={10}>\r\n                                        <Input type=\"textarea\" id=\"message\" name=\"message\"\r\n                                            value={this.state.message}\r\n                                            onChange={this.handleInputChange}></Input>\r\n                                    </Col>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Col md={{ size: 7, offset: 5 }}>\r\n                                        <Button type=\"submit\" color=\"primary\">\r\n                                            Send Feedback\r\n                                    </Button>\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        </div>\r\n\r\n                            {/* <Row className=\"form-group\">\r\n                                <Col md={{ size: 7, offset: 5 }}>\r\n                                    <Button type=\"submit\" color=\"primary\" >\r\n                                        Login\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row> */}\r\n                    </ModalBody>\r\n                </Modal>\r\n                {/*<Modal isOpen={this.state.isModalSignUpOpen} toggle={this.toggleModalSignUpOpen}>\r\n                    <ModalHeader toggle={this.toggleModalSignUpOpen}>Sign Up</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form model=\"signup\" onSubmit={(values) => this.handleSignUp(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"name\" md={4}>Full Name</Label>\r\n                                <Col md={8}>\r\n                                    <Control.text model=\".name\" type=\"text\" id=\"name\" name=\"name\" placeholder=\"Full Name\"\r\n                                        className=\"form-control\" validators={{ required }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".name\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required'\r\n                                        }} /></Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={4}>E-mail</Label>\r\n                                <Col md={8}>\r\n                                    <Control.text model=\".email\" type=\"email\" id=\"email\" name=\"email\" placeholder=\"Email Id\"\r\n                                        className=\"form-control\" validators={{ required, validEmail }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required ',\r\n                                            validEmail: 'Must be a valid email'\r\n                                        }}\r\n                                    /></Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"phone\" md={4}>Phone</Label>\r\n                                <Col md={8}>\r\n                                    <Control.text model=\".phone\" type=\"tel\" id=\"phone\" name=\"phone\" placeholder=\"Phone Number\"\r\n                                        className=\"form-control\" validators={{ required, validPhone, isNumber }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".phone\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required ',\r\n                                            validPhone: 'Must be a valid phone',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                    /></Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"password\" md={4}>Password</Label>\r\n                                <Col md={8}>\r\n                                    <Control.text model=\".password\" type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\"\r\n                                        className=\"form-control\" validators={{ required, validPassword }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".password\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required ',\r\n                                            validPassword: 'Password must have more than 7 characters'\r\n                                        }}\r\n                                    /></Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"location\" md={4}>Current Location</Label>\r\n                                <Col md={8}>\r\n                                    <Control.text model=\".location\" type=\"text\" id=\"location\" name=\"location\" placeholder=\"Current Location\"\r\n                                        className=\"form-control\" validators={{ required }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".location\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required'\r\n                                        }} /></Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"role\" md={4}>Role</Label>\r\n                                <Col md={4}>\r\n                                    <Control.select model=\".role\" value={this.state.role} name=\"role\" className=\"form-control\" onChange={this.handleRoleChange}>\r\n                                        <option value=\"consumer\">Consumer</option>\r\n                                        <option value=\"agent\">Agent</option>\r\n                                    </Control.select></Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 7, offset: 5 }}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Sign Up\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal> */}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","E:\\software\\nodeExamples\\delivery-frontend\\src\\shared\\baseurl.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\configureStore.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\userLogin.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\ActionCreators.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\reducer.js",[],["111","112"],"E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\ActionTypes.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\forms.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\RequestFormComponent.js",["113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131"],"import React, { useEffect, useState } from 'react';\r\nimport { Nav, Jumbotron, NavbarToggler, Collapse, NavItem, Navbar, NavbarBrand, Button, Modal, ModalHeader, ModalBody, Label, Row, Input, Col } from 'reactstrap';\r\nimport { Link, NavLink, Redirect, Prompt } from 'react-router-dom';\r\nimport { Control, LocalForm, Errors, Form, actions } from 'react-redux-form';\r\nimport handleViewport from 'react-in-viewport';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => !(val) || (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\n\r\nconst useProgressiveImage = src => {\r\n    const [sourceLoaded, setSourceLoaded] = useState(null)\r\n\r\n    useEffect(() => {\r\n        const img = new Image()\r\n        img.src = src\r\n        img.onload = () => setSourceLoaded(src)\r\n    }, [src])\r\n\r\n    return sourceLoaded;\r\n}\r\n\r\nconst RequestForm = (props) => {\r\n    const loaded = useProgressiveImage('./images/jumbo.jpg');\r\n\r\n    //Display only blurred background till the image loads\r\n    if(!loaded){\r\n    return(\r\n    //Loading animation (Option 1)\r\n    // <Jumbotron style={{ backgroundColor: '#242b2c', height: '100vh'}}>\r\n    //     <div className=\"container loading\">\r\n    //         <span className=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></span>\r\n    //         <p>Loading . . .</p>\r\n    //     </div>                \r\n    // </Jumbotron>\r\n\r\n    //Blurred Pic (Option 2)\r\n            <>\r\n            <Jumbotron style={{ backgroundImage: `url('./images/placeholder.jpg')`, height: '100vh'}}></Jumbotron>\r\n            </>\r\n        )\r\n    }\r\n\r\n    //Display all components after the background image loads\r\n    return (\r\n        <>\r\n            <Jumbotron style={{ backgroundImage: `url(${loaded})` }}>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 col-sm-12\">\r\n                            <JumbotronTextComponent/>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-4 col-sm-12\">\r\n                            <FormComponent postRequestForm={props.postRequestForm} history={props.history} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Jumbotron>\r\n        </>\r\n    )\r\n}\r\n\r\n//Jumbotron Text Component\r\nconst JumbotronTextBlock = (props) => {\r\n    const { inViewport, enterCount, forwardedRef } = props;\r\n    console.log(\"inViewport is:\" + inViewport + \" & enterCount is: \" + enterCount);\r\n    const jumboTextClass = (inViewport && enterCount === 1) ? \"jumbotext\" : \"jumbotext-static\";\r\n\r\n    return(\r\n        <div ref={forwardedRef}>\r\n            <div className=\"container\">\r\n                <div className={jumboTextClass}>\r\n                    {/* <h1>Dothraki Delivery<span style={{color:\"teal\"}}>.</span></h1> */}\r\n                    <span>Wanna Send goods to your loved ones?</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Higher Order Component (takes one component in the function and returns another component)\r\nconst JumbotronTextComponent = handleViewport(JumbotronTextBlock,);\r\n\r\n//Form Component\r\nconst FormComponentBlock = (props) => {\r\n    const [formIsHalfFilledOut, setFormIsHalfFilledOut] = useState(false);\r\n    const handleSubmit = async (values) => {\r\n        setFormIsHalfFilledOut(false);\r\n        await props.postRequestForm(values.destination, values.latitude, values.longitude, values.phone, props.history);\r\n        //reset logic moved to ActionCreators.js\r\n        // if(props.history.length === 1){\r\n        //     props.resetRequestForm();\r\n        // }        \r\n    }\r\n\r\n    const { inViewport, enterCount, forwardedRef } = props;\r\n    const requestFormClass = (inViewport && enterCount === 1) ? \"request-form\" : \"request-form-static\";\r\n\r\n    useEffect(() => {\r\n        if (formIsHalfFilledOut) {\r\n            window.onbeforeunload = () => true\r\n        } else {\r\n            window.onbeforeunload = undefined\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div ref={forwardedRef}>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className={requestFormClass}>\r\n                        <div className=\"request_form\">\r\n                            <h4>Create a request</h4>\r\n                            <Form id=\"create-request\" model=\"request\" onSubmit={(values) => handleSubmit(values)}>\r\n                                <Prompt\r\n                                    when={formIsHalfFilledOut}\r\n                                    message=\"Are you sure you want to leave?\"\r\n                                /><Row className=\"form-group\">\r\n                                    <Label htmlFor=\"destination\" md={12} sm={12}>Destination Address</Label>\r\n                                    <Col md={12} sm={12}>\r\n                                        <Control.text model=\".destination\" id=\"destination\" name=\"destination\" placeholder=\"Street, Landmark, City\"\r\n                                            className=\"form-control\" validators={{ required, minLength: minLength(10), maxLength: maxLength(25) }}\r\n                                            onChange={(event) => { !formIsHalfFilledOut && setFormIsHalfFilledOut(event.target.value.length > 0) }}\r\n                                        ></Control.text>\r\n                                        <Errors className=\"text-danger\" model=\".destination\" show=\"touched\"\r\n                                            messages={{\r\n                                                required: 'Required',\r\n                                                minLength: 'Must be greater than 10 chars',\r\n                                                maxLength: 'Must be smaller than or equal to 25 chars'\r\n                                            }}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"latitude\" md={12} sm={12}>Destination Latitude</Label>\r\n                                    <Col md={12} sm={12}>\r\n                                        <Control.text model=\".latitude\" id=\"latitude\" name=\"latitude\" placeholder=\"xx.xxxx\"\r\n                                            validators={{ required, minLength: minLength(7), maxLength: maxLength(10) }}\r\n                                            className=\"form-control\"\r\n                                            onChange={(event) => { !formIsHalfFilledOut && setFormIsHalfFilledOut(event.target.value.length > 0) }}>\r\n                                        </Control.text>\r\n                                        <Errors\r\n                                            className=\"text-danger\"\r\n                                            model=\".latitude\"\r\n                                            show=\"touched\"\r\n                                            messages={{\r\n                                                required: 'Required',\r\n                                                minLength: 'Must be greater than 7 chars',\r\n                                                maxLength: 'Must be smaller than or equal to 10 chars'\r\n                                            }}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"longitude\" md={12} sm={12}>Destination Longitude</Label>\r\n                                    <Col md={12} sm={12}>\r\n                                        <Control.text model=\".longitude\" id=\"longitude\" name=\"longitude\"\r\n                                            placeholder=\"yy.yyyy\" className=\"form-control\"\r\n                                            validators={{ required, minLength: minLength(7), maxLength: maxLength(10) }}\r\n                                            onChange={(event) => { !formIsHalfFilledOut && setFormIsHalfFilledOut(event.target.value.length > 0) }}\r\n                                        ></Control.text>\r\n                                        <Errors\r\n                                            className=\"text-danger\"\r\n                                            model=\".longitude\"\r\n                                            show=\"touched\"\r\n                                            messages={{\r\n                                                required: 'Required',\r\n                                                minLength: 'Must be greater than 7 chars',\r\n                                                maxLength: 'Must be smaller than or equal to 10 chars'\r\n                                            }}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"phone\" md={12} sm={12}>Destination's Contact No.</Label>\r\n                                    <Col md={12} sm={12}>\r\n                                        <Control.text model=\".phone\" id=\"phone\" name=\"phone\"\r\n                                            placeholder=\"Phone number of receiver\" className=\"form-control\"\r\n                                            validators={{ required, minLength: minLength(10), maxLength: maxLength(10), isNumber }}\r\n                                            onChange={(event) => { !formIsHalfFilledOut && setFormIsHalfFilledOut(event.target.value.length > 0) }}\r\n                                        ></Control.text>\r\n                                        <Errors\r\n                                            className=\"text-danger\"\r\n                                            model=\".phone\"\r\n                                            show=\"touched\"\r\n                                            messages={{\r\n                                                required: 'Required',\r\n                                                minLength: 'Must be greater than 9 numbers',\r\n                                                maxLength: 'Must be smaller than or equal to 10 numbers',\r\n                                                isNumber: 'Must be a number'\r\n                                            }}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"form-group\">\r\n                                    <Col md={{ size: 12, offset: 0 }} sm={{ size: 12, offset: 0 }}>\r\n                                        <Button type=\"submit\" className=\"requestFormButton\" block>\r\n                                            Create Request\r\n                                    </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Higher Order Component (takes one component in the function and returns another component)\r\nconst FormComponent = handleViewport(FormComponentBlock,);\r\n\r\n\r\n\r\nexport default RequestForm;","E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\requests.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\PendingRequestsComponent.js",["132"],"import React from 'react';\r\nimport { Table, Row, Col, Button} from 'reactstrap';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { Loading } from './LoadingComponent';\r\nimport { HashLink } from 'react-router-hash-link';\r\n\r\nconst PendingRequests = (props) => {\r\n    if(!props.isLoggedIn.isLoggedIn){\r\n        props.addTargetRoute(\"/pendingrequests\");\r\n        console.log(props.targetRoute);\r\n        return <Redirect to=\"/login#login-form\"/>\r\n    }\r\n    if (props.errMess) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h4>{props.errMess}</h4>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    if(props.isLoading){        \r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h4>Loading...</h4>\r\n                <Loading />\r\n                </div>\r\n            </div>\r\n            );        \r\n    }\r\n    if(props.requests === null){\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h4>No requests pending!</h4>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    var serialNumber = 1;\r\n    const requestsArray = props.requests.map(request => {\r\n        var status = request.agent_id === null ? 'Waiting for agents': 'Request claimed by agent';\r\n        return (\r\n            <tr key={serialNumber}>\r\n                <th scope=\"row\">{serialNumber++}</th>\r\n                <td>{request.consumer_address}</td>\r\n                <td>{request.destination_address}</td>\r\n                <td>{request.destination_phone}</td>\r\n                <td>{request.distance_close===0?'No':'Yes'}</td>\r\n                <td>{new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit', hour: 'numeric', minute: 'numeric', second: 'numeric', timeZone: 'Asia/Kolkata' }).format(new Date(Date.parse(request.date_time)))}</td>\r\n                <td>{status}</td>\r\n            </tr>\r\n        );\r\n      });\r\n    return(\r\n        <div className='container pending_request'>\r\n            <Row style={{padding: \"10px 0px 10px 0px\"}}>\r\n            <Col md={6} sm={3} xs={3}>\r\n                    <HashLink smooth to=\"/home#create-request\" target=\"_blank\">\r\n                        <Button>\r\n                            <span className=\"fa fa-external-link-square fa=lg\"></span>\r\n                            {' '}Create new request\r\n                        </Button>\r\n                    </HashLink>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{padding: \"20px 0px 5px 0px\"}}>                \r\n                <Col md={6} sm={3} xs={3}>\r\n                    <h4>Pending Requests</h4>\r\n                </Col>\r\n            </Row>\r\n        <Table responsive borderless hover striped className='text-center' size='md' id=\"pending-requests\">\r\n            <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>Pickup Address</th>\r\n                    <th>Destination Address</th>\r\n                    <th>Destination Phone</th>\r\n                    <th>Approaching Destination</th>\r\n                    <th>Date</th>\r\n                    <th>Status</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {requestsArray}\r\n            </tbody>\r\n        </Table>\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default PendingRequests;","E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\LoginComponent.js",["133","134","135","136"],"E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\targetRoute.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\LoadingComponent.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\SignupComponent.js",["137","138","139","140","141","142","143","144"],"E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\RatingStarComponent.js",["145"],"import ReactStars from \"react-rating-stars-component\";\r\nimport React from \"react\";\r\n\r\n\r\nconst ratingChanged = (newRating) => {\r\n    console.log(newRating);\r\n};\r\n\r\nconst RatingStar = (props) => {\r\n    return (\r\n        <div>\r\n            <ReactStars\r\n                count={5}\r\n                // onChange={ratingChanged}\r\n                size={24}\r\n                activeColor=\"#ffd700\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RatingStar;\r\n\r\n// render(\r\n//   <ReactStars\r\n//     count={5}\r\n//     onChange={ratingChanged}\r\n//     size={24}\r\n//     activeColor=\"#ffd700\"\r\n//   />,\r\n\r\n//   document.getElementById(\"where-to-render\")\r\n// );",["146","147"],"E:\\software\\nodeExamples\\delivery-frontend\\src\\redux\\protectedRoute.js",[],"E:\\software\\nodeExamples\\delivery-frontend\\src\\components\\TryMeComponent.js",[],{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":57,"column":5,"nodeType":"154","messageId":"155","endLine":59,"endColumn":6},{"ruleId":"156","severity":1,"message":"157","line":126,"column":17,"nodeType":"158","endLine":126,"endColumn":51},{"ruleId":"159","severity":1,"message":"160","line":2,"column":10,"nodeType":"161","messageId":"162","endLine":2,"endColumn":14},{"ruleId":"159","severity":1,"message":"163","line":2,"column":15,"nodeType":"161","messageId":"162","endLine":2,"endColumn":24},{"ruleId":"159","severity":1,"message":"164","line":2,"column":144,"nodeType":"161","messageId":"162","endLine":2,"endColumn":147},{"ruleId":"159","severity":1,"message":"160","line":3,"column":19,"nodeType":"161","messageId":"162","endLine":3,"endColumn":23},{"ruleId":"148","replacedBy":"165"},{"ruleId":"150","replacedBy":"166"},{"ruleId":"159","severity":1,"message":"167","line":2,"column":10,"nodeType":"161","messageId":"162","endLine":2,"endColumn":13},{"ruleId":"159","severity":1,"message":"168","line":2,"column":26,"nodeType":"161","messageId":"162","endLine":2,"endColumn":39},{"ruleId":"159","severity":1,"message":"169","line":2,"column":41,"nodeType":"161","messageId":"162","endLine":2,"endColumn":49},{"ruleId":"159","severity":1,"message":"170","line":2,"column":51,"nodeType":"161","messageId":"162","endLine":2,"endColumn":58},{"ruleId":"159","severity":1,"message":"171","line":2,"column":60,"nodeType":"161","messageId":"162","endLine":2,"endColumn":66},{"ruleId":"159","severity":1,"message":"172","line":2,"column":68,"nodeType":"161","messageId":"162","endLine":2,"endColumn":79},{"ruleId":"159","severity":1,"message":"173","line":2,"column":89,"nodeType":"161","messageId":"162","endLine":2,"endColumn":94},{"ruleId":"159","severity":1,"message":"174","line":2,"column":96,"nodeType":"161","messageId":"162","endLine":2,"endColumn":107},{"ruleId":"159","severity":1,"message":"175","line":2,"column":109,"nodeType":"161","messageId":"162","endLine":2,"endColumn":118},{"ruleId":"159","severity":1,"message":"176","line":2,"column":132,"nodeType":"161","messageId":"162","endLine":2,"endColumn":137},{"ruleId":"159","severity":1,"message":"160","line":3,"column":10,"nodeType":"161","messageId":"162","endLine":3,"endColumn":14},{"ruleId":"159","severity":1,"message":"177","line":3,"column":16,"nodeType":"161","messageId":"162","endLine":3,"endColumn":23},{"ruleId":"159","severity":1,"message":"178","line":3,"column":25,"nodeType":"161","messageId":"162","endLine":3,"endColumn":33},{"ruleId":"159","severity":1,"message":"179","line":4,"column":19,"nodeType":"161","messageId":"162","endLine":4,"endColumn":28},{"ruleId":"159","severity":1,"message":"180","line":4,"column":44,"nodeType":"161","messageId":"162","endLine":4,"endColumn":51},{"ruleId":"181","severity":1,"message":"182","line":123,"column":41,"nodeType":"183","endLine":126,"endColumn":42},{"ruleId":"181","severity":1,"message":"182","line":139,"column":41,"nodeType":"183","endLine":142,"endColumn":149},{"ruleId":"181","severity":1,"message":"182","line":159,"column":41,"nodeType":"183","endLine":163,"endColumn":42},{"ruleId":"181","severity":1,"message":"182","line":179,"column":41,"nodeType":"183","endLine":183,"endColumn":42},{"ruleId":"159","severity":1,"message":"160","line":3,"column":10,"nodeType":"161","messageId":"162","endLine":3,"endColumn":14},{"ruleId":"159","severity":1,"message":"184","line":1,"column":17,"nodeType":"161","messageId":"162","endLine":1,"endColumn":26},{"ruleId":"181","severity":1,"message":"182","line":62,"column":29,"nodeType":"183","endLine":64,"endColumn":30},{"ruleId":"181","severity":1,"message":"182","line":78,"column":29,"nodeType":"183","endLine":80,"endColumn":30},{"ruleId":"181","severity":1,"message":"185","line":95,"column":37,"nodeType":"183","endLine":95,"endColumn":120},{"ruleId":"159","severity":1,"message":"184","line":1,"column":27,"nodeType":"161","messageId":"162","endLine":1,"endColumn":36},{"ruleId":"159","severity":1,"message":"178","line":3,"column":10,"nodeType":"161","messageId":"162","endLine":3,"endColumn":18},{"ruleId":"181","severity":1,"message":"182","line":40,"column":37,"nodeType":"183","endLine":41,"endColumn":94},{"ruleId":"181","severity":1,"message":"182","line":53,"column":37,"nodeType":"183","endLine":54,"endColumn":106},{"ruleId":"181","severity":1,"message":"182","line":68,"column":37,"nodeType":"183","endLine":69,"endColumn":116},{"ruleId":"181","severity":1,"message":"182","line":84,"column":37,"nodeType":"183","endLine":85,"endColumn":109},{"ruleId":"181","severity":1,"message":"182","line":99,"column":37,"nodeType":"183","endLine":100,"endColumn":94},{"ruleId":"181","severity":1,"message":"186","line":112,"column":37,"nodeType":"183","endLine":112,"endColumn":171},{"ruleId":"159","severity":1,"message":"187","line":5,"column":7,"nodeType":"161","messageId":"162","endLine":5,"endColumn":20},{"ruleId":"148","replacedBy":"188"},{"ruleId":"150","replacedBy":"189"},"no-native-reassign",["190"],"no-negated-in-lhs",["191"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Jumbotron' is defined but never used.","'Row' is defined but never used.",["190"],["191"],"'Nav' is defined but never used.","'NavbarToggler' is defined but never used.","'Collapse' is defined but never used.","'NavItem' is defined but never used.","'Navbar' is defined but never used.","'NavbarBrand' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'Input' is defined but never used.","'NavLink' is defined but never used.","'Redirect' is defined but never used.","'LocalForm' is defined but never used.","'actions' is defined but never used.","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'useEffect' is defined but never used.","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","'ratingChanged' is assigned a value but never used.",["190"],["191"],"no-global-assign","no-unsafe-negation"]